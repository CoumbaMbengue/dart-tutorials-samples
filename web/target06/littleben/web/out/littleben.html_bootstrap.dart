import "dart:async" as IC;import "dart:html" as u;import "dart:collection" as JC;import "dart:isolate" as UC;class KC{static const  LC="Chrome";static const  MC="Safari";final  EC;final  minimumVersion;const KC(this.EC,[this.minimumVersion]);}class NC{final  name;const NC(this.name);}final JB=new l();var KB; get bB{if(kB){lB(JB,o.LB,'currentTime');}return KB;}set bB( g){if(jB(JB)){mB(JB,o.LB,'currentTime',KB,g);}KB=g;} cB(){var g=new Duration(seconds:1);new IC.Timer.periodic(g,UB);UB(null);} UB( XC){var g=new DateTime.now();bB=dB(g.hour,g.minute,g.second);} dB( g, h, i){if(g>12){g=g-12;}var j=(h<=9)?'0${h}':'${h}';var k=(i<=9)?'0${i}':'${i}';return '${g}:${j}:${k}';} eB(){var YC=u.document.body;var ZC;var aC=new QC(YC);ZC=YC.nodes[3];var bC=aC.FC(()=>bB,false);ZC.nodes.addAll([new u.Text('\n      The current time is: '),bC,new u.Text('\n    ')]);aC.RB();aC.insert();}main(){YB=true;cB();eB();}typedef  v( e);typedef  fB( changes);typedef  w();typedef  gB();class GB{final oldValue;final newValue;final  changes;GB(this.oldValue,this.newValue,[this.changes]); operator==(g){return g is GB&&oldValue==g.oldValue&&newValue==g.newValue&&changes==g.changes;} get hashCode=>wB(oldValue,newValue,changes); toString(){if(changes!=null)return '#<ChangeNotification to ${newValue}: ${changes}>';return '#<ChangeNotification from ${oldValue} to ${newValue}>';}}class o{static const LB=1;static const MB=2;static const VB=MB|4;static const WB=MB|8;final  type;final key;final oldValue;final newValue;o(this.type,this.key,this.oldValue,this.newValue); operator==(g){return g is o&&type==g.type&&key==g.key&&oldValue==g.oldValue&&newValue==g.newValue;} get hashCode=>xB(type,key,oldValue,newValue); toString(){var g;switch (type){case LB:g='field';break;case MB:g='index';break;case VB:g='insert';break;case WB:g='remove';break;}return '#<ChangeRecord ${g} ${key} from ${oldValue} to ${newValue}>';}} hB(g, i,[ debugName]){if(g is l){var h=g;return NB(h,(k){i(new GB(h,h,k));});}var j=new HB(g,i,debugName);if(!j.cC()){return nB;}return j.dC;} NB( g, i){if(g.CB==null)g.CB=new OB();var h=g.CB.add(i);return h.remove;}class l{var CB;var BB;final  hashCode= ++l.iB;static var iB=0;} jB( g)=>g.CB!=null&&g.CB.head!=null; get kB=>AB!=null; lB( g, h,i)=>AB.eC(g,h,i); mB( g, j,k, h, i){if((j&(o.VB|o.WB))==0){if(h==i)return;}if(q==null){q=[] ;yB(oB);}if(g.BB==null){g.BB=[] ;q.add(g);}g.BB.add(new o(j,k,h,i));} nB(){}var AB;var XB=100;var q;var s; oB(){var p=0;while (q!=null||s!=null){var j=q;q=null;var i=s;s=null;if(p++ ==XB){pB(j,i);return;}if(j!=null){for(var h in j){var FB=h.BB;h.BB=null;for(var g=h.CB.head;g!=null;g=g.next){var k=g.value;try {k(FB);}catch (TB,t){DB(TB,t,k,'from ${h}');}}}}if(i!=null){i.forEach((TC,HC){HC.fC();});}}} pB( k, j){var g=[] ;if(k!=null){for(var i in k){var FB=i.BB;g.add('${i} ${FB}');}}if(j!=null){for(var p in j.values){var h=p.fC();if(h!=null)g.add('${p} ${h}');}}q=null;s=null;var t='exceeded notifiction limit of ${XB}, possible ' 'circular reference in observer callbacks: ${g.take(10).join(", ")}';sB(t);}class HB{static var qB=0;final  gC= ++HB.qB;final  hC;final  iC;final  jC;final  kC=new Map();final  lC=[] ;var mC=false;var nC;HB(this.hC,this.iC,this.jC); toString()=>jC!=null?'<observer ${gC}: ${jC}>':'<observer ${gC}>'; cC(){var h=AB;AB=this;try {nC=hC();if(nC is Iterable&&nC is !List&&nC is !l){nC=(nC as Iterable).toList();}}catch (g,i){DB(g,i,hC,'from ${this}');nC=null;}kC.forEach(oC);kC.clear();assert(AB==this);AB=h;pC();return lC.length>0;} qC( i){try {iC(i);}catch (g,h){DB(g,h,iC,'from ${this}');}} pC(){var g=nC;if(g is !l)return;lC.add(NB(g,(h){qC(new GB(g,g,h));}));} eC( p, t,g){var i=kC.putIfAbsent(p,()=>new Map());try {var h=i[g];if(h==null)h=0;i[g]=h|t;}catch (j,k){DB(j,k,g,'hashCode or operator == from ${this}');}} oC( i, j){lC.add(NB(i,(k){if(mC)return;for(var g in k){var h=j[g.key];if(h!=null&&(h&g.type)!=0){mC=true;if(s==null){s=new JC.SplayTreeMap();}s[gC]=this;return;}}}));} dC(){for(var g in lC){g();}mC=false;} fC(){if(!mC)return null;var g=nC;dC();cC();try {if(g==nC)return null;}catch (i,j){DB(i,j,g,'operator == from ${this}');return null;}var h=new GB(g,nC);qC(h);return h;}}typedef  rB( message);var sB=(g)=>print(g);typedef  tB(error,stackTrace,obj, message);var DB=uB; uB(i,g,h, j){print('web_ui.observe: unhandled error calling ${h} ${j}.\n' 'error:\n${i}\n\nstack trace:\n${g}');}class vB{vB();}class m<n>{var rC;var sC;var tC;var uC;m.VC( g,this.tC):uC=g{if(tC!=null)tC.vC++ ;} get next=>sC; get value=>uC;set value( g)=>uC=g; wC( g, h){sC=h;rC=g;if(g!=null)g.sC=this;if(h!=null)h.rC=this;return this;} append( g)=>new m<n>.VC(g,tC).wC(this,sC); remove(){if(tC==null)return;tC.vC-- ;if(rC!=null){rC.sC=sC;}else{tC.xC=sC;}if(sC!=null){sC.rC=rC;}else{tC.yC=rC;}sC=null;rC=null;tC=null;}}class OB<n> extends JC.IterableBase<n>{var xC;var yC; get length=>vC;var vC=0;OB(){} get head=>xC; add( h){var g=new m<n>.VC(h,this);if(yC==null)return xC=yC=g;return yC=g.wC(yC,null);} addLast( g)=>add(g); addAll( g)=>g.forEach(add); get iterator=>new OC<n>(this);}class OC<n> implements Iterator<n>{var zC;var tC;var AD;var BD=-1;OC(this.tC){zC=new List<m>(tC.length);var h=0;var g=tC.head;while (g!=null){zC[h++ ]=g;g=g.next;}} get current=>AD; moveNext(){do{BD++ ;}while(BD<zC.length&&zC[BD].tC!=tC);if(BD<zC.length){AD=zC[BD].value;return true;}else{AD=null;return false;}}}EB(h,g)=>h.hashCode*31+g.hashCode;wB(h,g,i)=>EB(EB(h,g),i);xB(g,i,h,j)=>EB(EB(g,i),EB(h,j)); yB( h()){var g=new UC.ReceivePort();g.receive((i,j){g.close();h();});g.toSendPort().send(null);} zB(h, g,[ stringValue]){var i=h is vB;if(stringValue==null){stringValue=h.toString();}if(!i&&g is u.Text){g.text=stringValue;}else{var j=g;g=i?new u.Element.html(stringValue):new u.Text(stringValue);j.replaceWith(g);}return g;}abstract class PB{ RB(){} insert(); remove();}class PC extends PB{final exp;final  action;final  isFinal;var IB;PC(this.exp,this.action,this.isFinal); insert(){if(isFinal){action(new GB(null,exp()));}else if(IB!=null){throw new StateError('binding already attached');}else{IB=BC(exp,action,'generic-binding');}} remove(){if(!isFinal){IB();IB=null;}}}class QC extends PB{final  GC;final  children=[] ;final  nodes=[] ;QC(this.GC); FC( h,i){var g=new u.Text('');children.add(new PC(()=>'${h()}',(j){g=zB(h(),g,j.newValue);},i));return g;} add( g)=>nodes.add(g); addAll( g)=>nodes.addAll(g); RB(){for(var g=0,h=children.length;g<h;g++ ){children[g].RB();}} insert(){for(var g=0,h=children.length;g<h;g++ ){children[g].insert();}} remove(){for(var g=children.length-1;g>=0;g-- ){children[g].remove();}children.clear();}}var YB=false; AC(g, j,[ debugName]){if(YB)return hB(g,j);if(j==null)return (){};if(QB==null)QB=new OB<ZB>();var h;var i=false;if(g is aB){h=(g as aB).CD;}else if(g is Function){h=g;try {var k=g();if(k is List){i=true;}else if(k is Iterable){i=true;h=()=>g().toList();}}catch (p,TB){print('error: evaluating ${debugName!=null?debugName:"<unnamed>"} ' 'watcher threw error (${p}, ${TB})');}}else if(g is List){h=()=>g;i=true;}else if(g is Iterable){h=()=>g.toList();i=true;}var t=i?new RC(h,j,debugName):new ZB(h,j,debugName);var FB=QB.add(t);return FB.remove;} BC(h,i,[debugName]){var j=AC(h,i,debugName);var g=h;if(g is Function){g=g();}if(g is Iterable&&g is !List){g=g.toList();}i(new GB(null,g));return j;}var QB;class ZB{final  SB;final  CD;final  DD;var ED;ZB(this.CD,this.DD,this.SB){ED=CD();} toString()=>SB==null?'<unnamed>':SB; FD(g){ED=g;}GD(){try {return CD();}catch (g,h){print('error: evaluating ${this} watcher threw an exception (${g}, ${h})');}return ED;}}typedef  CC<DC>();class aB<DC>{aB();}class RC<DC> extends ZB{RC(g, i, h):super(g,i,h){FD(GD());} FD(g){ED=new List<DC>.from(g);}}//@ sourceMappingURL=littleben.html_bootstrap.dart.map
